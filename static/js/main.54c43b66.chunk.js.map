{"version":3,"sources":["logo.svg","demos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Demo","props","state","demo","this","canvasId","React","Component","Fractal","width","height","expr","zoom","center","iterations","smallColor","largeColor","boundary","img","initState","z","math","re","im","x","y","multiply","add","done","imageData","color","index","i","data","n","z0","replace","toString","ctx","document","getElementById","getContext","fractalData","createImageData","imgToComplex","f","getFunc","modulus","e","alert","setPixel","putImageData","event","target","value","search","setState","renderFractal","preventDefault","type","onChange","handleExpr","min","handleIterations","handleCenter","handleZoom","handleSmallColor","handleLargeColor","max","handleSize","onClick","handleUpdate","id","App","className","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54c43b66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport * as math from 'mathjs';\r\n\r\nclass Demo extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      demo: this.props.demo,\r\n    };\r\n  }\r\n  render(){\r\n    switch (this.state.demo){\r\n      case 'fractal':\r\n        return (\r\n          <Fractal canvasId=\"demo\"/>\r\n        );\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n}\r\n\r\nclass Fractal extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    var size = 200;\r\n    this.state = {\r\n      canvasId: this.props.canvasId,\r\n      width: size,\r\n      height: size,\r\n      expr: 'z^2 + z0',\r\n      zoom: '2',\r\n      center: '0',\r\n      iterations: 1,\r\n      smallColor: [0,0,255,255],\r\n      largeColor: [255,0,0,255],\r\n      boundary: 2,\r\n      img: null,\r\n    };\r\n    \r\n    this.initState = this.state;\r\n  }\r\n\r\n  //~~~~~~~~~~~~~~~~~~~Generator methods~~~~~~~~~~~~~~~~\r\n  \r\n  modulus(z){\r\n    return math.sqrt((z.re)*(z.re) + (z.im)*(z.im));\r\n  }\r\n  \r\n  imgToComplex(x,y){\r\n    var z = math.complex(2*x/this.state.width - 1,\r\n                         -2*y/this.state.height + 1);\r\n    return math.chain(z)\r\n               .multiply(this.state.zoom)\r\n               .add(this.state.center)\r\n               .done();\r\n  }\r\n  \r\n  setPixel(imageData, x, y, color){\r\n    var index = (x + y * imageData.width) * 4;\r\n\t\tfor (var i = 0; i < 4; i++){\r\n      imageData.data[index + i] = color[i];\r\n    }\r\n  }\r\n\r\n  color(n){\r\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~Use math.vector~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    return [math.round(255*(1-n/this.state.iterations)),\r\n            0, \r\n            math.round(255*(n/this.state.iterations)),\r\n            255];\r\n  }\r\n\r\n  getFunc(z0=0){\r\n    return (z) => math.complex(\r\n                    math.evaluate(\r\n                      this.state.expr.replace(/z0/g,`(${z0.toString()})`)\r\n                                     .replace(/z/g,`(${z.toString()})`)\r\n                    )\r\n                  );\r\n  }\r\n  \r\n  renderFractal(){\r\n    var canvas = document.getElementById(this.state.canvasId);\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var fractalData = ctx.createImageData(this.state.width, this.state.height);\r\n    for (var y = 0; y <= fractalData.height; y++){\r\n      for (var x = 0; x <= fractalData.width; x++){\r\n        var z = this.imgToComplex(x,y);\r\n        \r\n        var f = this.getFunc(z);\r\n        \r\n        for (var n = 0; n < this.state.iterations && this.modulus(z) <= this.state.boundary; n++){\r\n          try {z = f(z)}\r\n          catch(e) {\r\n            alert(\"Problem in Fractal.renderFractal: \"+e.toString());\r\n            return;\r\n          }\r\n        }\r\n        if (this.modulus(z) > this.state.boundary){\r\n          this.setPixel(fractalData, x,y, this.color(n));\r\n        } \r\n      }\r\n    }\r\n\r\n    ctx.putImageData(fractalData,0,0);\r\n    \r\n  }\r\n\r\n  //~~~~~~~~~~~~~~~Handlers~~~~~~~~~~~~~~~~~\r\n\r\n  handleExpr(event) {\r\n    var n = event.target.value.search(/[^0-9zi+\\-*\\/^(). ]/);\r\n    if (n == -1) this.setState({expr: event.target.value});\r\n  }\r\n\r\n  handleIterations(event) {\r\n    this.setState({iterations: event.target.value});\r\n  }\r\n\r\n  handleSmallColor(event) {\r\n    this.setState({smallColor: event.target.value});\r\n  }\r\n\r\n  handleLargeColor(event) {\r\n    this.setState({largeColor: event.target.value});\r\n  }\r\n\r\n  handleSize(event) {\r\n    this.setState({\r\n      width: event.target.value,\r\n      height: event.target.value\r\n    });\r\n  }\r\n\r\n  handleCenter(event) {\r\n    var n = event.target.value.search(/[^0-9i+\\-*\\/^(). ]/);\r\n    if (n == -1) this.setState({center: event.target.value});\r\n  }\r\n\r\n  handleZoom(event) {\r\n    var n = event.target.value.search(/[^0-9i+\\-*\\/^(). ]/);\r\n    if (n == -1) this.setState({zoom: event.target.value});\r\n  }\r\n\r\n  handleUpdate(event) {\r\n    try {\r\n      this.setState(\r\n        {\r\n          center: math.evaluate(this.state.center.toString()),\r\n          zoom: math.evaluate(this.state.zoom.toString()),\r\n        },\r\n        this.renderFractal\r\n      );\r\n    }\r\n    catch(e) {\r\n      alert('Problem in Fractal.handleUpdate: '+e.toString());\r\n    }\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.renderFractal();\r\n  }\r\n\r\n  \r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <form>\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td>function:</td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={e => this.handleExpr(e)}\r\n                    value={this.state.expr}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>iterations:</td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    onChange={e => this.handleIterations(e)}\r\n                    value={this.state.iterations}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>center (complex):</td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={e => this.handleCenter(e)}\r\n                    value={this.state.center}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>zoom (complex):</td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={e => this.handleZoom(e)}\r\n                    value={this.state.zoom}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>iteration colors:</td>\r\n                <td>\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={e => this.handleSmallColor(e)}\r\n                    value={this.state.smallColor}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={e => this.handleLargeColor(e)}\r\n                    value={this.state.largeColor}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>size:</td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"50\"\r\n                    max=\"800\"\r\n                    onChange={e => this.handleSize(e)}\r\n                    value={this.state.height}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Update\"\r\n                    onClick={e => this.handleUpdate(e)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n        <canvas \r\n          id={this.state.canvasId} \r\n          width={this.state.width} \r\n          height={this.state.height}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Demo;\r\n\r\n/*\r\nReactDOM.render(\r\n  <Demo demo=\"fractal\" />,\r\n  document.getElementById('root')\r\n);\r\n\r\nReactDOM.render(\r\n  <canvas id=\"myCanvas\" width={300} height={150} />,\r\n  document.getElementById('root')\r\n);\r\n*/","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Demo from './demos.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Demos</h1>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n      <Demo demo=\"fractal\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}